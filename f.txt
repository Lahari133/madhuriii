PROGRAM 1 : BFS
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void bfs(int a[10][10], int n, int source)
{
    int s[10], q[10], f=0, r=-1, t, v;
    for(v=0;v<n;v++)
    {
        s[v]=0;
    }
    q[++r]=source;
    s[source]=1;
    while(f<=r)
    {
        t=q[f++];
        for(v=0;v<n;v++)
        if(a[t][v]==1 && s[v]==0)
        {
            q[++r]=v;
            printf("THE BSF TRAVERSAL IS  %d %d\n",t,v);
            s[v]=1;
        }
    }
}
int main()
{
    int a[10][10],i,n,j,s;
    double clk;
    clock_t starttime,endtime;
    printf("\nEnter the number of cities:");
    scanf("%d",&n);
    printf("\nEnter the matrix representation:");
    for(i=0;i<n;i++)
    for(j=0;j<n;j++)
    scanf("%d",&a[i][j]);
    printf("Enter the source city:");
    scanf("%d",&s);
    starttime=clock();
    bfs(a,n,s);
    endtime=clock();
    clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
    printf("The run time is %f",clk);
}
OUTPUT :
Enter the number of cities:3

Enter the matrix representation:
0 1 1
0 0 0
0 0 0
Enter the source city:0
THE BSF TRAVERSAL IS  0 1
THE BSF TRAVERSAL IS  0 2
The run time is 0.000019

=== Code Execution Successful ===
PROGRAM 2 : DFS
#include<stdio.h>
#include<time.h>
int n,i,j,a[50][50],reach[50],count=0,pos[50];
int main()
{
    int v;
    double clk;
    clock_t starttime,endtime;
    printf("Enter the number lands to be surveyed:");
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
        pos[i]=0;
    }
    read_matrix();
    printf("Enter the starting land to be surveyed:");
    scanf("%d",&v);
    starttime=clock();
    dfs(v);
    endtime=clock();
    clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
    printf("Vertices moved from the given vertex:");
    for(i=1;i<=count;i++)
    {
        printf("%d\t",reach[i]);
    }
    printf("The run time is %f",clk);
}
read_matrix()
{
    printf("enter the adjacency matrix Enter(0/1):");
    for(i=1;i<=n;i++)
    for(j=1;j<=n;j++)
    if(i!=j)
    {
        printf("(%d %d)",i,j);
        scanf("%d",&a[i][j]);
    }
}
dfs(int v)
{
    int u;
    reach[++count]=v;
    u=adjacent(v);
    while(u)
    {
        if(checkreach(u)==0);
        dfs(u);
        u=adjacent(v);
    }
}
adjacent(int i)
{
     for(j=pos[i]+1;j<=n;j++)
        if(a[i][j]==1)
        {
            pos[i]=j;
            return j;
        }
        pos[i]=n+1;
        return 0;
}
checkreach(int u)
{
    for(i=1;i<=count;i++)
    if(reach[i]==u)
    return 1;
    return 0;
}


or

#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void bfs(int a[10][10], int n, int source)
{
    int s[10], q[10], f=0, r=-1, t, v;
    for(v=0;v<n;v++)
    {
        s[v]=0;
    }
    q[++r]=source;
    s[source]=1;
    while(f<=r)
    {
        t=q[f++];
        for(v=0;v<n;v++)
        if(a[t][v]==1 && s[v]==0)
        {
            q[++r]=v;
            printf("THE BSF TRAVERSAL IS  %d %d\n",t,v);
            s[v]=1;
        }
    }
}
int main()
{
    int a[10][10],i,n,j,s;
    double clk;
    clock_t starttime,endtime;
    printf("\nEnter the number of cities:");
    scanf("%d",&n);
    printf("\nEnter the matrix representation:");
    for(i=0;i<n;i++)
    for(j=0;j<n;j++)
    scanf("%d",&a[i][j]);
    printf("Enter the source city:");
    scanf("%d",&s);
    starttime=clock();
    bfs(a,n,s);
    endtime=clock();
    clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
    printf("The run time is %f",clk);
}

output :
Enter the number of cities:3

Enter the matrix representation:0 1 1
0 0 1
0 0 1
Enter the source city:0
THE BSF TRAVERSAL IS  0 1
THE BSF TRAVERSAL IS  0 2
The run time is 0.000016

or 

#include <stdio.h>
#include <time.h>

void dfs(int a[10][10], int visited[10], int n, int i) {
    printf("%d ", i + 1);
    visited[i] = 1;
    for (int j = 0; j < n; j++) {
        if (a[i][j] == 1 && !visited[j]) {
            dfs(a, visited, n, j);
        }
    }
}

int main() {
    int a[10][10], visited[10], n, v;
    double clk;
    clock_t starttime, endtime;

    printf("Enter the number of nodes (n): ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    printf("\nEnter the starting Land number (1 to %d): ", n);
    scanf("%d", &v);
    if (v < 1 || v > n) {
        printf("Invalid starting Land number.\n");
        return 1;
    }

    v = v - 1; // Adjusting to 0-based index

    starttime = clock();
    printf("The DFS traversal is:\n");
    dfs(a, visited, n, v);
    endtime = clock();

    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("\nThe time taken is: %f seconds\n", clk);
return 0;
}


=== Code Execution Successful ===

PROGRAM 3 : BINARY_SEARCH
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
int main()
{
int i,a[1000],j,bottom,top,temp,mid,n,key;
double clk;
clock_t starttime,endtime;
printf("Enter the number of production:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
    a[i]=rand()%100;
    printf("the product id list are :%d\n",a[i]);
}
for(i=0;i<n-1;i++){
for(j=0;j<n-i-1;j++){
if(a[j]>a[j+1]){
temp=a[j];
a[j]=a[j+1];
a[j+1]=temp;
}
}
}
printf("\nSorted product list:");
for(i=0;i<n;i++)
printf("\t %d",a[i]);

printf("\nEnter the product id to be searched:");
scanf("%d",&key);
starttime=clock();
top=n;
bottom=0;
do
{
    mid=(bottom+top)/2;
    if(key<a[mid])
    top=mid-1;
    else if(key>a[mid])
    bottom=mid+1;
}
while(key!=a[mid] && bottom<=top);
if(key==a[mid]){
    printf("Found!\n");
    printf("Found the key %d at postion %d",mid+1,key);
}
else{
    printf("Not found");
}
endtime=clock();
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("\nThe run time is %f",clk);
}

PROGRAM 4 : INSERTION_SORT
#include<stdio.h>
#include<time.h>
void insertion_sort(long a[], int n)
{
int i,j;
long v=0;
for(i=1;i<n;i++)
{
v=a[i];
j=i-1;
while(j>=0 && a[j]>v)
{
a[j+1]=a[j];
j=j-1;
}
a[j+1]=v;
}
printf("Sorted numbers are:\n");
for(i=0;i<n;i++)
printf("%ld\n",a[i]);
}
int main()
{
clock_t starttime, endtime;
starttime=clock();
double clk;
int i,n;
long a[10];
printf("Enter the value of n:");
scanf("%d", &n);
for(i=0;i<n;i++)
a[i]=9000000000 + (rand() % 99999999)+1;
printf("\n Phone Numbers are;\n");
for(i=0;i<n;i++)
printf("%ld\n",a[i]);
insertion_sort(a,n);
endtime=clock();
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("\n THE RUN TIME IS :%f\n",clk);
}

PROGRAM 5 : MERGE_SORT
#include<stdio.h>
#include<time.h>

int a[500000];
void merge(int,int,int);

void merge_sort(int low, int high)
{
	int mid;
	if(low<high)
	{
		mid=(low+high)/2;
		merge_sort(low,mid);
		merge_sort(mid+1,high);
		merge(low,mid,high);
	}
}

void merge(int low,int mid,int high){
	int h,i,j,b[500000],k;
	h=low;
	i=low;
	j=mid+1;
	while((h<=mid)&&(j<=high))
	{
		if(a[h]<=a[j])
		{
			b[i]=a[h];
			h++;
		}
		else{
			b[i]=a[j];
			j++;
		}
	i++;
	}
	if(h>mid)
	{
		for(k=j;k<=high;k++)
		{
			b[i]=a[k];
			i++;
		}
	}
	else{
		for(k=h;k<=mid;k++)
		{
			b[i]=a[k];
			i++;
		}
	}
for(k=low;k<=high;k++) a[k]=b[k];
}

int main()
{
	int n,i;
	double clk;
	clock_t starttime,endtime;
	printf("MERGE SORT\n");
	printf("Enter the number of employee records :\n");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		a[i]=rand()%100;
		printf("The Employee ID's are:\t%d\n",a[i]);
	}
	starttime=clock();
	merge_sort(0,n-1);
	endtime=clock();
	clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
	printf("\nEmployee ID's in sorted order;\n");
	for(i=0;i<n;i++)
	{
	printf("\t%d",a[i]);
	}
printf("\nThe run time is %f\n",clk);
}

PROGRAM 6 : QUICK_SORT

#include<stdio.h>
#include<time.h>

int partition(int a[], int low, int high)
{
	int i,j,temp,pivot;
	pivot=a[low];
	i=low+1;
	j=high;
	while(1){
		while(i<high && a[i]<=pivot)
			i++;
			while(a[j]>pivot)
				j--;
				if(i<j){
					temp=a[i];
					a[i]=a[j];
					a[j]=temp;
					}
				else{
					temp=a[j];
					a[j]=a[low];
					a[low]=temp;
				return j;
			}
		}
	}
	

quick_sort(int a[],int low,int high){
int j;
if(low<high)
{
	j=partition(a,low,high);
	quick_sort(a,low,j-1);
	quick_sort(a,j+1,high);
	}
}

 int main(){
 int i,n,a[200000];
 double clk;
 clock_t starttime,endtime;
 printf("Enter the number of students records:\n");
 scanf("%d",&n);
 for(i=0;i<n;i++)
 {
 	a[i]=rand()%100;
 	printf("\nThe roll numbrers are\t%d",a[i]);
 }
 starttime=clock();
 quick_sort(a,0,n-1);
 endtime=clock();
 clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
 printf("\nSorted roll numbers are :\n");
 for(i=0;i<n;i++)
 printf("\t%d",a[i]);
 printf("\nThe run time is %f\n",clk);
 }

PROGRAM 7 : HEAP_SORT

#include<stdio.h>
#include<time.h>
#define TRUE 1
#define FALSE 0

void heapbottomup(int h[],int n)
{
int i,heap,v,j,k;
for(i=n/2; i>0; i--){
k=i;
v=h[k];
heap=FALSE;
while(!heap&&(2*k)<=n){
j=2*k;
if(j<n)
if(h[j]<h[j+1])
j=j+1;
if(v>=h[j])
heap=TRUE;
else{
h[k]=h[v];
k=j;
}
}
}
}

void heapsort(int h[],int n){
int i,temp,last=n;
if(n>=1)
return;
else{
heapbottomup(h,n);
temp=h[last];
h[last]=h[1];
h[1]=temp;
last--;
heapsort(h,n-1);
}
}

int main(){
int h[20],n,i;
double clk;
clock_t starttime,endtime;
printf("\nEnter the number of resumes\n");
scanf("%d",&n);
for(i=1;i<=n;i++){
h[i]=rand()%100;
printf("\nThe candidates ranks are:\t%d",h[i]);
}
starttime=clock();
heapsort(h,n);
endtime=clock();
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("\nThe ranks in sorted order:\n");
for(i=1;i<=n;i++)
printf("\t%d",h[i]);
printf("\nThe run time is %f\n",clk);
}

PROGRM 8 : HORSPOOL 
#include <stdio.h>
#include <string.h>

#define MAX 500

int t[MAX];

void shifttable(char p[])
{
	int i,j,m;
	m=strlen(p);
	for(i=0; i<MAX; i++)
		t[i]=m;
		for(j=0; j<m-1; j++)
			t[p[j]]=m-1-j;
}

int horspool(char src[], char p[])
{
	int i,j,k,m,n;
	n=strlen(src);
	m=strlen(p);
	printf("\n Length of text = %d",n);
	printf("\n Length of pattern = %d",m);
	i=m-1;
	while(i<n)
		{
		k=0;
		while((k<m)&&(p[m-1-k]==src[i-k]))
			k++;
			if(k==m)
			return(i-m+1);
			else
			i+=t[src[i]];
		}
	return -1;
}

void main(){
char src[100],p[100];
int pos;
printf("Enter the text in which pattern is to be searched :\n");
gets(src);
printf("Enter the pattern to be searched :\n");
gets(p);
shifttable(p);
pos=horspool(src,p);
if(pos>=0)
printf("\nThe desired pattern was found starting from position %d",pos+1);
else
printf("\nThe pattern was not found in the given text ");
}


PROGRAM 9 :FLOYDS
#include <stdio.h>
#include <time.h>
double clk;
clock_t starttime, endtime;

int min(int a, int b)
{
if(a<b)
return a;
else
return b;
}

void floyd(int n, int w[10][10], int d[10][10])
{
int i, j, k;
for(i=0; i<n; i++)
for(j=0; j<n;j++)
d[i][j]=w[i][j];

for(k=0; k<n; k++)
{
for(i=0; i<n; i++)
{
for(j=0; j<n; j++)
{
d[i][j]=min(d[i][j], d[i][k]+d[k][j]);
}
}
}
}

void main()
{
int i,j,n,d[10][10],w[10][10];
printf("Enter no of vertices :\n");
scanf("%d",&n);
printf("Enter the cost matrix :\n");
for(i=0; i<n; i++)
for(j=0; j<n; j++)
scanf("%d",&w[i][j]);
starttime=clock();
floyd(n,w,d);
endtime=clock();
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("all pair shortest path matrix is\n");

for(i=0; i<n; i++)
{
for(j=0;j<n;j++)
{
printf("%d\t",d[i][j]);
}
printf("\nThe run time is %f\n",clk);
}
}

PROGRAM 10 : KNAPSACK
#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int max(int x, int y)
{
return((x>y)?x:y);
}
int knap(int n, int w[10], int value[10], int m, int v[10][10])
{
int i,j;
for(i=0;i<=n;i++)
for(j=0;j<=m;j++)
{
if(i==0||j==0)
v[i][j]=0;
else if(j<w[i])
v[i][j]=v[i-1][j];
else
v[i][j]=max(v[i-1][j],value[i]+v[i-1][j-w[i]]);
}
printf("\n The table for solving knapsack problem using dynamic programming is :\n");
for(i=0;i<=n;i++)
{
for(j=0;j<=n;j++)
{
printf("%d\t",v[i][j]);
}
printf("\n");
}
}

int main()
{
double clk;
clock_t starttime,endtime;
int v[10][10],n,i,j,w[10],value[10],m,result;
printf("Enter the number of items :");
scanf("%d",&n);
printf("Enter the weight of %d items :\n",n);
for(i=1;i<n;i++)
{
scanf("%d",&w[i]);
}
printf("Enter the value of %d items :",n);
for(i=1;i<=n;i++)
{
scanf("%d",&value[i]);
}
printf("Enter the capacity of the basket:");
scanf("%d",&m);
for(i=0;i<=n;i++)
{
for(j=0;j<=m;j++)
{
v[i][j]=0;
}
}
starttime=clock();
result=knap(n,w,value,m,v);
endtime=clock();
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("Optimal solution for the knapsack problem is %d\n",v[n][m]);
printf("%f\n",clk);
}

output :
Enter the number of items :4
Enter the weight of 4 items :
2 1 3 4
Enter the value of 4 items :12
10
20
Enter the capacity of the basket:5

 The table for solving knapsack problem using dynamic programming is :
0	0	0	0	0	
0	0	4	4	4	
0	12	12	16	16	
0	12	12	16	22	
0	32	32	36	42	
Optimal solution for the knapsack problem is 42
0.000041


=== Code Execution Successful ===

PROGRAM 11 : KRUSKAL
#include<stdio.h>
#include<time.h>

struct edge
{
int u,v,cost;
};
typedef struct edge edge;

int find(int v, int parent[]){
while(parent[v]!=v)
{
v=parent[v];
}
return v;
}

void union_ij(int i, int j, int parent[]){
if(i<j)
parent[j]=i;
else
parent[i]=j;
}

void kruskal(int n, edge e[], int m){
int count,k,i,sum,u,v,j,t[10][10],p,parent[10];
edge temp;
count=0;
k=0;
sum=0;
for(i=0;i<m;i++)
{
for(j=0;j<m-1;j++){
if(e[j].cost>e[j+1].cost){
temp.u=e[j].u;
temp.v=e[j].v;
temp.cost=e[j].cost;
e[j].u=e[j+1].u;
e[j].v=e[j+1].v;
e[j].cost=e[j+1].cost;
e[j+1].u=temp.u;
e[j+1].cost=temp.cost;
}
}
}
for(i=0;i<n;i++)
parent[i]=i;
p=0;
while(count!=n-1)
{
u=e[p].u;
v=e[p].v;
i=find(u,parent);
j=find(v,parent);
if(i!=j)
{
t[k][0]=u;
t[k][1]=v;
k++;
count++;
sum+=e[p].cost;
union_ij(i,j,parent);
}
p++;
}
if(count==n-1){
printf("Spanning tree exist\n");
printf("\nThe spanning tree is as follows :\n");
for(i=0;i<n-1;i++){
printf("%d %d\t",t[i][0],t[i][1]);
}
printf("\nThe cost of the spanning tree is %d \n",sum);
}
else
printf("\nSpanning tree does not exist");
}

void main()
{
int n,m,a,b,i,cost;
double clk;
clock_t starttime, endtime;
edge e[20];
printf("Enter the number of vertices :\n");
scanf("%d",&n);
printf("Enter the number of edges :\n");
scanf("%d",&m);
printf("Enter the edge list(u v cost)\n");
for(i=0;i<m;i++){
scanf("%d %d %d",&a,&b,&cost);
e[i].u=a;
e[i].v=b;
e[i].cost=cost;
}
starttime=clock();
kruskal(n,e,m);
endtime=clock();
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("The time taken is %f\n",clk);
}

PROGRAM 12 : DIJISTRA
#include<stdio.h>
#include<time.h>
#define MAX 10

int choose(int dist[], int s[], int n)
{
int j=1,min=100,w;
for(w=1;w<=n;w++)
if((dist[w]<min)&&(s[w]==0))
{
min=dist[w];
j=w;
}
return j;
}

void spath(int v,int cost[][MAX],int dist[], int n){
int w,u,i,num,s[MAX];
for(i=1;i<=n;i++)
{
s[i]=0;
dist[i]=cost[v][i];
}
s[v]=0;
dist[i]=999;
for(num=2;num<=n;num++){
u=choose(dist,s,n);
s[u]=1;
for(w=1;w<=n;w++)
if((dist[u]+cost[u][w])<dist[w]&& !s[w])
dist[w]=dist[u]+cost[u][w];
}
}

void main(){
int i,j,cost[MAX][MAX],dist[MAX],n,v;
double clk;
clock_t starttime,endtime;
printf("\nEnter number of vertices :");
scanf("%d",&n);
printf("\nEnter cost of adjacency matrix\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&cost[i][j]);
printf("\nEnter the source vertex =");
scanf("%d",&v);
starttime=clock();
spath(v,cost,dist,n);
endtime=clock();
printf("\nshortest distance\n");
for(i=1;i<=n;i++)
printf("\n%d to %d = %d",v,i,dist[i]);
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("\nThe time taken is %f\n",clk);
}


PROGRAM 13 : NQUEENS
#include <stdio.h>
#include <math.h>
#define FALSE 0
#define TRUE 1

int x[20];
int place(int k, int i){
int j;
for(j=1;j<k;j++){
if((x[j]==i)||(abs(x[j]-i)==abs(j-k)))
return FALSE;
}
return TRUE;
}

void nqueens(int k,int n){
int i,a;
for(i=1;i<=n;i++){
if(place(k,i)){
x[k]=i;
if(k==n){
for(a=1;a<=n;a++)
printf("%d\t",x[a]);
printf("\n");
}
else
nqueens(k+1,n);
}
}
}

void main(){
int n;
printf("\nEnter the number of queens:");
scanf("%d",&n);
printf("\nThe solution to N queens problem is :\n");
nqueens(1,n);
}

PROGRAM 14 :
#include <stdio.h>
int count,w[10],d,x[10];

void subset(int cs,int k,int r){
int i;
x[k]=1;
if((cs+w[k])>=d){
printf("\nSubset solution = %d\n",++count);
for(i=0;i<=k;i++){
if(x[i]==1)
printf("%d\n",w[i]);
}
}
else if(cs+w[k]+w[k+1]<=d)
subset(cs+w[k],k+1,r-w[k]);
if((cs+r-w[k] >= d)&&(cs+w[k+1])<=d)
{
x[k]=0;
subset(cs,k+1,r-w[k]);
}
}

int main(){
int sum=0,i,n;
printf("Enter no of elements\n");
scanf("%d",&n);
printf("Enter the elments in ascending order\n");
for(i=0;i<n;i++)
scanf("%d",&w[i]);
printf("Enter the required sum\n");
scanf("%d",&d);
for(i=0;i<n;i++)
sum+=w[i];
if(sum < d){
printf("no solution exits\n");
}
printf("The solution is \n");
count=0;
subset(0,0,sum);
return 0;
}
